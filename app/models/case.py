from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Float, Boolean, Enum
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

from app.db.database import Base

# Configuration constants for document limits
MAX_FILE_SIZE_MB = 50  # Maximum file size in MB
MAX_FILES_PER_CASE = 10  # Maximum number of files per case
ALLOWED_FILE_TYPES = [".pdf", ".jpg", ".jpeg", ".png", ".tiff", ".doc", ".docx"]

class CaseStatus(enum.Enum):
    NEW = "new"
    AWAITING_PAYMENT = "awaiting_payment"
    PAID = "paid"
    PROCESSING = "processing"
    ANALYSIS_READY = "analysis_ready"
    DOCUMENTS_READY = "documents_ready"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class PackageType(enum.Enum):
    BASIC = "basic"
    STANDARD = "standard"
    PREMIUM = "premium"
    EXPRESS = "express"

class DocumentType(enum.Enum):
    PDF = "pdf"
    IMAGE = "image"
    SCAN = "scan"  # Scanned documents
    PHOTO = "photo"  # Phone photos of documents

class Case(Base):
    __tablename__ = "cases"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)  # User-defined case name
    description = Column(Text, nullable=True)
    client_notes = Column(Text, nullable=True)  # Initial context from client
    client_context = Column(Text, nullable=True)  # What client expects
    client_agreement = Column(Text, nullable=True)  # Does client agree/disagree
    status = Column(Enum(CaseStatus), default=CaseStatus.NEW)
    package_type = Column(Enum(PackageType), nullable=True)
    package_price = Column(Float, nullable=True)
    is_urgent = Column(Boolean, default=False)
    deadline = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Foreign key to user
    user_id = Column(Integer, ForeignKey("users.id"))
    user = relationship("User", foreign_keys=[user_id], back_populates="cases")
    
    # Assigned operator
    operator_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    operator = relationship("User", foreign_keys=[operator_id])
    
    # Relationship to documents
    documents = relationship("Document", back_populates="case", cascade="all, delete-orphan")
    
    # Relationship to analysis
    analysis = relationship("Analysis", back_populates="case", uselist=False, cascade="all, delete-orphan")
    
    # Relationship to legal documents
    legal_documents = relationship("LegalDocument", back_populates="case", cascade="all, delete-orphan")
    
    # Relationship to payments
    payments = relationship("Payment", back_populates="case", cascade="all, delete-orphan")
    
    # Relationship to notifications
    notifications = relationship("Notification", back_populates="case", cascade="all, delete-orphan")
    
    # Relationship to comments
    comments = relationship("CaseComment", cascade="all, delete-orphan")
    
    # Relationship to status history
    status_history = relationship("CaseStatusHistory", cascade="all, delete-orphan")

class Document(Base):
    __tablename__ = "documents"

    id = Column(Integer, primary_key=True, index=True)
    filename = Column(String, index=True)
    original_filename = Column(String)
    file_type = Column(String)  # pdf, image, doc
    file_size = Column(Integer)
    file_path = Column(String)  # Path where file is stored
    document_type = Column(Enum(DocumentType), default=DocumentType.PDF)
    is_processed = Column(Boolean, default=False)
    ocr_text = Column(Text, nullable=True)  # Extracted text from OCR
    uploaded_at = Column(DateTime, default=datetime.utcnow)
    
    # Foreign key to case
    case_id = Column(Integer, ForeignKey("cases.id"))
    case = relationship("Case", back_populates="documents")


class Analysis(Base):
    __tablename__ = "analysis"
    
    id = Column(Integer, primary_key=True, index=True)
    case_id = Column(Integer, ForeignKey("cases.id"))
    content = Column(Text)  # Analysis content
    summary = Column(Text, nullable=True)
    recommendations = Column(Text, nullable=True)
    possible_actions = Column(Text, nullable=True)  # JSON array of possible legal actions
    confidence_score = Column(Float, nullable=True)
    is_preview = Column(Boolean, default=True)  # True if only 1/3 is shown
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Generated by operator
    operator_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    operator = relationship("User")
    
    case = relationship("Case", back_populates="analysis")


class LegalDocument(Base):
    __tablename__ = "legal_documents"
    
    id = Column(Integer, primary_key=True, index=True)
    case_id = Column(Integer, ForeignKey("cases.id"))
    document_name = Column(String)  # e.g., "Skarga na czynność komornika"
    document_type = Column(String)  # Type of legal document
    content = Column(Text)
    price = Column(Float)
    is_purchased = Column(Boolean, default=False)
    is_preview = Column(Boolean, default=True)  # True if only 1/3 is shown
    instructions = Column(Text, nullable=True)  # How to use the document
    created_at = Column(DateTime, default=datetime.utcnow)
    purchased_at = Column(DateTime, nullable=True)
    
    # Generated by operator
    operator_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    operator = relationship("User")
    
    case = relationship("Case", back_populates="legal_documents")


class CaseComment(Base):
    __tablename__ = "case_comments"
    
    id = Column(Integer, primary_key=True, index=True)
    case_id = Column(Integer, ForeignKey("cases.id"))
    analysis_id = Column(Integer, ForeignKey("analysis.id"), nullable=True)  # Comment on specific analysis
    legal_document_id = Column(Integer, ForeignKey("legal_documents.id"), nullable=True)  # Comment on specific document
    
    # Author
    author_user_id = Column(Integer, ForeignKey("users.id"))
    
    # Content
    content = Column(Text)
    is_internal = Column(Boolean, default=False)  # True for operator notes, False for client comments
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    case = relationship("Case")
    analysis = relationship("Analysis")
    legal_document = relationship("LegalDocument")
    author = relationship("User")


class CaseStatusHistory(Base):
    __tablename__ = "case_status_history"
    
    id = Column(Integer, primary_key=True, index=True)
    case_id = Column(Integer, ForeignKey("cases.id"), index=True)
    
    # Status change details
    from_status = Column(Enum(CaseStatus), nullable=True)  # Null for initial creation
    to_status = Column(Enum(CaseStatus))
    
    # Who made the change
    actor_user_id = Column(Integer, ForeignKey("users.id"), nullable=True)  # Null for system changes
    
    # Additional context
    reason = Column(Text, nullable=True)
    extra_data = Column(Text, nullable=True)  # JSON string for additional data
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    case = relationship("Case")
    actor = relationship("User")